#!/usr/bin/env bash

set -e -u -o pipefail

FROMDIR=""
TODIR=""

# Helper function to print error message and exit
function fail {
	echo "$1" >&2
	exit 1
}

# "\\-..." -> "-..."
function unescape_hyphen {
	if [[ "${1:0:2}" == "\\-" ]]; then
		echo "${1:1}"
	else
		echo "$1"
	fi
}

# Parse command-line arguments

if [[ "$#" -eq 0 ]]; then
	fail "Require FROMDIR and TODIR"
fi

declare -a ARR_FROMBASEDIR=()
declare -a ARR_TOBASEDIR=()
NO_DEFAULT_GRAFTING=false
MKDIR_COMMAND="mkdir"
SYMLINK_COMMAND="ln -s"
READLINK_COMMAND="readlink"

while [[ "$#" -gt 0 ]]; do
	case "$1" in
		-h|--help)
			cat<<END_HELP_MESSAGE
Usage:
    lndir-grafted \\
    [--graft FROMBASEDIR TOBASEDIR] \\
    [--no-default-grafting] \\
    [--mkdir-command MKDIR_COMMAND] \\
    [--symlink-command SYMLINK_COMMAND] \\
    [--readlink-command READLINK_COMMAND] \\
    FROMDIR TODIR

    lndir-grafted [OPTIONS] -- FROMDIR TODIR

    lndir-grafted FROMDIR TODIR \\
        --graft FROMBASEDIR1 TOBASEDIR1 \\
        --graft FROMBASEDIR2 TOBASEDIR2

lndir alternative that grafts the symbolic links
to the destination directory tree

See \`man 1 lndir-grafted' for more details.
END_HELP_MESSAGE
			exit 0
			;;
		--graft)
			if [[ "$#" -lt 2 ]]; then
				fail "Require FROMBASEDIR TOBASEDIR after $1"
			fi
			ARR_FROMBASEDIR+=("$(unescape_hyphen "$2")")
			ARR_TOBASEDIR+=("$(unescape_hyphen "$3")")
			shift 3
			;;
		--no-default-grafting)
			NO_DEFAULT_GRAFTING=true
			shift
			;;
		--mkdir-command)
			if [[ "$#" -lt 1 ]]; then
				fail "Require MKDIR_COMMAND after $1"
			fi
			MKDIR_COMMAND="$2"
			shift 2
			;;
		--symlink-command)
			if [[ "$#" -lt 1 ]]; then
				fail "Require SYMLINK_COMMAND after $1"
			fi
			SYMLINK_COMMAND="$2"
			shift 2
			;;
		--readlink-command)
			if [[ "$#" -lt 1 ]]; then
				fail "Require READLINK_COMMAND after $1"
			fi
			READLINK_COMMAND="$2"
			shift 2
			;;
		--)
			if [[ "$#" -lt 2 ]]; then
				fail "Require FROMDIR TODIR"
			fi
			FROMDIR="$(unescape_hyphen "$2")"
			TODIR="$(unescape_hyphen "$3")"
			shift 3
			break
			;;
		-*)
			fail "Unexpected argument $1"
			;;
		*)
			if [[ "$#" -lt 2 ]]; then
				fail "Require FROMDIR TODIR"
			fi
			FROMDIR="$(unescape_hyphen "$1")"
			TODIR="$(unescape_hyphen "$2")"
			shift 2
			;;
	esac
done

LENGTH_FROMDIR="${#FROMDIR}"

if ! $NO_DEFAULT_GRAFTING; then
	ARR_FROMBASEDIR+=("$FROMDIR")
	ARR_TOBASEDIR+=("$TODIR")
fi

N_BASEDIR="${#ARR_FROMBASEDIR[@]}"

# Manage directories
while IFS= read -d $'\0' -r ORIGINAL_DIR; do
	$MKDIR_COMMAND "$TODIR${ORIGINAL_DIR:$LENGTH_FROMDIR}"
done < <(find "$FROMDIR" -mindepth 1 -type d -print0)

# Manage regular files
while IFS= read -d $'\0' -r ORIGINAL_FILE; do
	$SYMLINK_COMMAND "$ORIGINAL_FILE" "$TODIR${ORIGINAL_FILE:$LENGTH_FROMDIR}"
done < <(find "$FROMDIR" -mindepth 1 -type f -print0)

# Manage symbolic links
while IFS= read -d $'\0' -r ORIGINAL_LINK; do
	NEW_SYMLINK="$TODIR${ORIGINAL_LINK:$LENGTH_FROMDIR}"
	ORIGINAL_TARGET="$($READLINK_COMMAND "$ORIGINAL_LINK")"
	LENGTH_ORIGINAL_TARGET="${#ORIGINAL_TARGET}"
	NEW_TARGET="$ORIGINAL_TARGET"
	# See if the target needs grafting
	for ((INDEX_BASEDIR=0;INDEX_BASEDIR<N_BASEDIR;INDEX_BASEDIR++)); do
		FROMBASEDIR="${ARR_FROMBASEDIR[$INDEX_BASEDIR]}"
		LENGTH_FROMBASEDIR="${#FROMBASEDIR}"
		TOBASEDIR="${ARR_TOBASEDIR[$INDEX_BASEDIR]}"
		if [[ "$LENGTH_ORIGINAL_TARGET" -ge "$LENGTH_FROMBASEDIR" ]] \
		&& [[ "${ORIGINAL_TARGET:0:$LENGTH_FROMBASEDIR}" == "$FROMBASEDIR" ]]; then
			NEW_TARGET="$TOBASEDIR${ORIGINAL_TARGET:$LENGTH_FROMBASEDIR}"
			break
		fi
	done
	$SYMLINK_COMMAND "$NEW_TARGET" "$NEW_SYMLINK"
done < <(find "$FROMDIR" -mindepth 1 -type l -print0)
